import numpy as np
import pandas as pd
from scipy.stats import wilcoxon

# Sample DataFrame format for F1 scores across D1-D52
data_align = {
    "Approaches": [        "GA2Vec-ANCPRBT",
"GA2Vec-ANCESM",
"GA2Vec-ANCT5",
"MONACO",
"SMETANA",
        # "SMETANA",
        "BEAMS",
        "multiMAGNA++",
        "HubAlign",
"IsoRankN"
    ],
"D_sars12": [0.666, 0.666, 0.666, 0.814, 0.814, 0.814, 0.888, 0.888, 0.074],
 "D_562_3702": [0.086, 0.073, 0.080, 0.116, 0.110, 0.084, 0.048, 0.039, 0.060],
 "D_562_4896": [0.172, 0.161, 0.177, 0.179, 0.181, 0.243,0.140, 0.176, 0.149],
"D_562_10116": [0.083, 0.08, 0.08, 0.076, 0.148, 0.343, 0.262, 0.338, 0.272],
#"D562_39947": [0.086, 0.086, 0.086, 0.08, 0.08, 0.320, 0.011, 0.071, np.nan],
"D_3702_4896": [0.053, 0.057, 0.058, 0.084, 0.082, 0.033,   0.016, 0.012, 0.046],
"D_3702_10116": [0, 0, 0, 0, 0, 0.016, 0.014, 0.057, 0.025],
"D_3702_39947": [0.019, 0.02, 0.20, 0.016, 0.016, 0.116, 0.108, 0, 0.030],
"D_4896_10116": [0.136, 0.136, 0.139, 0.117, 0.120, 0.089, 0.146, 0.051, 0.127],
"D_4896_39947": [0.043, 0.046, 0.044, 0.037, 0.037, 0.072, 0.011, 0.068, 0.028],
"D_4932_562": [0.301, 0.296, 0.295, 0.331, 0.342, 0.226, 0.209,0.265, 0.256],
"D_4932_3702": [0.086, 0.085, 0.084, 0.093, 0.101, 0.076, 0.019, 0.042,     0.052],
"D_4932_4896": [0.245, 0.244, 0.247, 0.273, 0.281, 0.212, 0.091, 0.115, 0.212],
"D_4932_9606": [0.456, 0.457, 0.457, 0.508, 0.483, 0.478, 0.224, 0.250, 0.440],
"D_4932_10090": [0.381, 0.371, 0.367, 0.585, 0.428, 0.799, 0.251, 0.285, 0.430],
"D_4932_10116": [0.190, 0.187, 0.184, 0.222, 0.222, 0.159, 0.108, 0.083, 0.281],
"D_4932_39947": [0.035, 0.033, 0.036, 0.027, 0.027, 0.152, 0.033, 0.072, 0.034],
"D_6239_562": [0, 0, 0, 0, 0, 0.686, 0, 0, 0],
"D_6239_3702": [0, 0, 0, 0, 0, 0.592, 0, 0, 0],
"D_6239_4896": [0, 0, 0, 0, 0, 0.683, 0, 0, 0],
"D_6239_4932": [0, 0, 0, 0.355, 0, 0.611, 0, 0, 0.292],
"D_6239_9606": [0, 0, 0, 0.522, 0, 0.588, 0.0004, 0.0004, 0.484],
"D_6239_10090": [0, 0, 0, 0.726, 0, 0.830,0, 0, 0.704],
"D_6239_10116": [0, 0, 0, 0, 0, 0.715, 0, 0, 0],
"D_6239_39947": [0, 0, 0, 0, 0, 0.713, 0, 0, 0],
"D_7227_562": [0.210, 0.210, 0.213, 0.215, 0.211, 0.334, 0.102, 0.112, 0.143],
"D_7227_3702": [0.067, 0.065, 0.069, 0.063, 0.072, 0.234, 0.186, 0.008, 0.035],
"D_7227_4896": [0.136, 0.140, 0.136, 0.147, 0.146, 0.311, 0.044, 0.028, 0.134],
"D_7227_4932": [0.247, 0.249, 0.248, 0.349, 0.249, 0.345, 0.056, 0.056, 0.287],
"D_7227_6239": [0, 0, 0, 0.440, 0, 0.561, 0, 0, 0.404],
"D_7227_9606": [0.270, 0.270, 0.273, 0.451, 0.242, 0.440, 0.092, 0.103, 0.381],
"D_7227_10090": [0.201, 0.207, 0.208, 0.594, 0.197, 0.690, 0.114, 0.100, 0.564],
"D_7227_10116": [0.088, 0.081, 0.083, 0.102, 0.102, 0.330, 0.069, 0.034, 0.118],
"D_7227_39947": [0.027, 0.026, 0, 0.044,  0.022, 0.328, 0.011, 0, 0.015],
"D_9606_562": [0.455, 0.46, 0.471, 0.528, 0.518, 0.509, 0.352, 0.424, 0.471],
"D_9606_3702": [0.047, 0.047, 0.046, 0.046, 0.059, 0.417, 0.040, 0.039, 0.039],
"D_9606_4896": [0.250, 0.259, 0.266, 0.301, 0.324, 0.475, 0.164, 0.169, 0.292],
"D_9606_10090": [0.487, 0.494, 0.489,0.769, 0.676, 0.727, 0.439, 0.169, 0.645],
"D_9606_10116": [0.132, 0.135, 0.117, 0.296, 0.310, 0.505, 0.294, 0.218, 0.417],
"D_9606_39947": [0.050, 0.050, 0.051, 0.043, 0.065, 0.505, 0.022, 0.068, 0.062],
"D_10090_562": [0.448, 0.442, 0.465, 0.473, 0.514, 0.910, 0.421, 0.441, 0.537],
 "D_10090_3702": [0.100, 0.094, 0.095, 0.110, 0.103, 0.803, 0.047, 0.057, 0.093],
"D_10090_4896": [0.259, 0.280, 0.268, 0.326, 0.334, 0.909, 0.739, 0.219, 0.240],
"D_10090_10116": [0.219, 0.209, 0.230, 0.339, 0.324, 0.933, 0.335, 0.247, 0.367],
"D_10090_39947": [0, 0, 0, 0.036, 0, 0.935, 0.033, 0.054, 0],
"D_10116_39947": [0, 0, 0, 0, 0, 0.139, 0.335, 0.014, 0.1],

    # Add columns D2 to D52 with respective F1 values
    # ...
}

# Create DataFrame
df = pd.DataFrame(data_align)
df.set_index("Approaches", inplace=True)

# List of comparisons provided by the user
comparisons = [
     "GA2Vec-ANCT5 vs MONACO",
    "GA2Vec-ANCT5 vs SMETANA", "GA2Vec-ANCT5 vs BEAMS", "GA2Vec-ANCT5 vs multiMAGNA++", "GA2Vec-ANCT5 vs HubAlign", "GA2Vec-ANCT5 vs IsoRankN"
]

# Compute pairwise Wilcoxon tests for F1 scores
p_values = {}
for comparison in comparisons:
    method1, method2 = comparison.split(' vs ')
    data1 = df.loc[method1].values
    data2 = df.loc[method2].values

    # Run Wilcoxon test if data1 and data2 differ
    if not (data1 == data2).all():
        _, p_value = wilcoxon(data1, data2, alternative='greater')  # "greater" for one-sided
        p_values[comparison] = p_value
    else:
        p_values[comparison] = np.nan  # Identical data

# Print p-values for each comparison
for comparison, p_value in p_values.items():
    print(f"{comparison}: {p_value:.4f}")
