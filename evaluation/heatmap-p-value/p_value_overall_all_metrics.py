
from numpy import nan
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

data_p_value_all_metrics = {
"Approaches":[
     "GA2Vec-ANCPRBT vs MONACO",
    "GA2Vec-ANCPRBT vs SMETANA", "GA2Vec-ANCPRBT vs BEAMS", "GA2Vec-ANCPRBT vs multiMAGNA++",
    "GA2Vec-ANCPRBT vs HubAlign", "GA2Vec-ANCPRBT vs IsoRankN",
    "GA2Vec-ANCESM vs MONACO", "GA2Vec-ANCESM vs SMETANA", "GA2Vec-ANCESM vs BEAMS",
    "GA2Vec-ANCESM vs multiMAGNA++", "GA2Vec-ANCESM vs HubAlign", "GA2Vec-ANCESM vs IsoRankN",
    "GA2Vec-ANCT5 vs MONACO", "GA2Vec-ANCT5 vs SMETANA", "GA2Vec-ANCT5 vs BEAMS",
    "GA2Vec-ANCT5 vs multiMAGNA++", "GA2Vec-ANCT5 vs HubAlign", "GA2Vec-ANCT5 vs IsoRankN",
],

"D_SARS12":[0.973, 0.973, 0.902, 0.844, 0.433, 0.02, 0.882, 0.882, 0.845, 0.727, 0.273, 0.012, 0.694, 0.694, 0.567, 0.629, 0.23, 0.012],
"D_hmSARS12":[0.969, 0.969, 0.433, 0.368, 0.009, nan, 0.969, 0.969, 0.567, 0.368, 0.009, nan, 0.969, 0.969, 0.433, 0.306, 0.009, nan],
"D_562_3702":[0.896, 0.896, 0.919, 0.213, 0.326, 0.125, 0.938, 0.93, 0.938, 0.248, 0.326, 0.18, 0.919, 0.896, 0.938, 0.213, 0.326, 0.104],
"D_562_4896":[0.5, 0.444, 0.712, 0.248, 0.131, 0.131, 0.61, 0.39, 0.663, 0.326, 0.163, 0.285, 0.5, 0.444, 0.663, 0.213, 0.118, 0.15],
"D_562_10116":[0.433, 0.85, 0.896, 0.59, 0.232, 0.377, 0.022, 0.787, 0.752, 0.545, 0.163, 0.242, 0.446, 0.82, 0.896, 0.545, 0.232, 0.377],
"D_562_39947":[0.704, 0.358, 0.632, 0.326, 0.058, nan, 0.358, 0.296, 0.632, 0.326, 0.058, nan, 0.863, 0.358, 0.632, 0.326, 0.058, nan],
"D_3702_4896":[0.875, 0.837, 0.758, 0.037, 0.006, 0.037, 0.875, 0.837, 0.801, 0.037, 0.006, 0.027, 0.85, 0.78, 0.712, 0.037, 0.006, 0.027],
"D_3702_10116":[0.232, 0.5, 0.919, 0.444, 0.058, 0.694, 0.232, 0.632, 0.919, 0.444, 0.058, 0.801, 0.3, 0.632, 0.919, 0.444, 0.058, 0.801],
"D_3702_39947":[0.715, 0.242, 0.8, 0.031, 0.009, 0.337, 0.715, 0.337, 0.8, 0.031, 0.009, 0.337, 0.545, 0.131, 0.61, 0.009, 0.009, 0.163],
"D_4896_10116":[0.936, 0.977, 0.837, 0.337, 0.014, 0.058, 0.875, 0.936, 0.751, 0.337, 0.006, 0.006, 0.8, 0.942, 0.712, 0.337, 0.006, 0.006],
"D_4896_39947":[0.41, 0.444, 0.787, 0.242, 0.031, 0.062, 0.715, 0.758, 0.787, 0.242, 0.037, 0.124, 0.59, 0.556, 0.787, 0.242, 0.037, 0.118],
"D_4932_562":[0.898, 0.787, 0.8, 0.213, 0.025, 0.049, 0.909, 0.787, 0.8, 0.213, 0.034, 0.049, 0.898, 0.787, 0.837, 0.213, 0.034, 0.082],
"D_4932_3702":[0.633, 0.633, 0.567, 0.082, 0.15, 0.082, 0.556, 0.752, 0.556, 0.082, 0.18, 0.125, 0.556, 0.633, 0.556, 0.082, 0.15, 0.125],
"D_4932_4896":[0.82, 0.875, 0.61, 0.102, 0.006, 0.009, 0.85, 0.875, 0.61, 0.102, 0.006, 0.009, 0.787, 0.875, 0.61, 0.082, 0.006, 0.009],
"D_4932_9606":[0.674, 0.455, 0.787, 0.01, 0.082, 0.125, 0.674, 0.455, 0.787, 0.01, 0.082, 0.125, 0.674, 0.455, 0.787, 0.01, 0.064, 0.102],
"D_4932_10090":[0.85, 0.545, 0.919, 0.15, 0.013, 0.285, 0.85, 0.455, 0.896, 0.125, 0.013, 0.326, 0.898, 0.59, 0.919, 0.15, 0.025, 0.41],
"D_4932_10116":[0.991, 0.982, 0.8, 0.248, 0.006, 0.758, 0.996, 0.996, 0.663, 0.248, 0.006, 0.758, 0.954, 0.938, 0.61, 0.248, 0.006, 0.663],
"D_4932_39947":[0.8, 0.8, 0.758, 0.104, 0.031, 0.009, 0.694, 0.955, 0.8, 0.118, 0.031, 0.014, 0.61, 0.712, 0.694, 0.118, 0.031, 0.009],
"D_6239_562":[0.801, 0.7, 0.837, 0.39, 0.118, 0.39, 0.801, 0.623, 0.837, 0.39, 0.118, 0.39, 0.912, 0.623, 0.938, 0.39, 0.118, 0.39],
"D_6239_3702":[0.896, 0.8, 0.912, 0.163, 0.444, 0.037, 0.837, 0.712, 0.936, 0.163, 0.39, 0.031, 0.8, 0.758, 0.919, 0.163, 0.39, 0.021],
"D_6239_4896":[0.663, 0.61, 0.896, 0.242, 0.009, 0.118, 0.663, 0.663, 0.869, 0.2, 0.009, 0.118, 0.712, 0.663, 0.869, 0.199, 0.009, 0.173],
"D_6239_4932":[0.998, 0.758, 0.951, 0.288, 0.5, 0.801, 0.963, 0.444, 0.82, 0.163, 0.39, 0.444, 0.963, 0.5, 0.82, 0.163, 0.39, 0.556],
"D_6239_9606":[0.545, 0.337, 0.663, 0.027, 0.082, 0.556, 0.59, 0.337, 0.663, 0.027, 0.082, 0.556, 0.545, 0.337, 0.663, 0.027, 0.082, 0.556],
"D_6239_10090":[0.337, 0.242, 0.556, 0.104, 0.009, 0.59, 0.337, 0.242, 0.556, 0.104, 0.009, 0.633, 0.444, 0.242, 0.556, 0.131, 0.009, 0.633],
"D_6239_10116":[0.249, 0.249, 0.896, 0.131, 0.009, 0.088, 0.3, 0.542, 0.954, 0.131, 0.009, 0.088, 0.377, 0.7, 0.991, 0.199, 0.022, 0.173],
"D_6239_39947":[0.751, 0.896, 0.869, 0.118, 0.022, 0.058, 0.632, 0.8, 0.869, 0.118, 0.022, 0.058, 0.306, 0.337, 0.712, 0.062, 0.009, 0.009],
"D_7227_562":[0.715, 0.715, 0.8, 0.15, 0.025, 0.118, 0.715, 0.715, 0.8, 0.18, 0.025, 0.163, 0.752, 0.715, 0.8, 0.15, 0.025, 0.163],
"D_7227_3702":[0.545, 0.898, 0.8, 0.025, 0.018, 0.018, 0.41, 0.898, 0.8, 0.025, 0.025, 0.012, 0.663, 0.898, 0.801, 0.025, 0.025, 0.025],
"D_7227_4896":[0.752, 0.752, 0.8, 0.049, 0.006, 0.125, 0.787, 0.752, 0.758, 0.049, 0.006, 0.213, 0.787, 0.752, 0.758, 0.064, 0.006, 0.082],
"D_7227_4932":[0.918, 0.545, 0.712, 0.046, 0.018, 0.242, 0.918, 0.5, 0.61, 0.046, 0.009, 0.131, 0.951, 0.545, 0.712, 0.062, 0.018, 0.242],
"D_7227_6239":[0.715, 0.444, 0.61, 0.163, 0.009, 0.545, 0.752, 0.5, 0.61, 0.088, 0.009, 0.545, 0.752, 0.567, 0.61, 0.163, 0.009, 0.545],
"D_7227_9606":[0.5, 0.213, 0.39, 0.009, 0.037, 0.125, 0.5, 0.248, 0.5, 0.009, 0.049, 0.18, 0.5, 0.285, 0.5, 0.009, 0.037, 0.125],
"D_7227_10090":[0.918, 0.5, 0.919, 0.02, 0.006, 0.82, 0.918, 0.5, 0.896, 0.02, 0.006, 0.787, 0.918, 0.5, 0.919, 0.02, 0.006, 0.85],
"D_7227_10116":[0.98, 0.869, 0.712, 0.18, 0.006, 0.61, 0.973, 0.869, 0.712, 0.15, 0.006, 0.663, 0.98, 0.896, 0.758, 0.18, 0.006, 0.712],
"D_7227_39947":[0.954, 0.963, 0.909, 0.081, 0.009, 0.567, 0.938, 0.951, 0.896, 0.081, 0.009, 0.567, 0.954, 0.973, 0.896, 0.131, 0.014, 0.751],
"D_9606_562":[0.752, 0.61, 0.837, 0.125, 0.006, 0.199, 0.85, 0.712, 0.845, 0.125, 0.006, 0.288, 0.715, 0.61, 0.837, 0.102, 0.006, 0.088],
"D_9606_3702":[0.213, 0.59, 0.758, 0.102, 0.006, 0.081, 0.213, 0.633, 0.8, 0.102, 0.006, 0.104, 0.163, 0.674, 0.837, 0.102, 0.006, 0.104],
"D_9606_4896":[0.5, 0.545, 0.712, 0.014, 0.006, 0.034, 0.59, 0.59, 0.758, 0.014, 0.006, 0.062, 0.41, 0.455, 0.61, 0.014, 0.006, 0.034],
"D_9606_10090":[0.898, 0.5, 0.869, 0.014, 0.006, 0.131, 0.85, 0.41, 0.837, 0.01, 0.006, 0.104, 0.85, 0.41, 0.837, 0.014, 0.006, 0.104],
"D_9606_10116":[0.936, 0.951, 0.8, 0.102, 0.021, 0.869, 0.875, 0.918, 0.8, 0.102, 0.025, 0.8, 0.936, 0.951, 0.8, 0.102, 0.025, 0.869],
"D_9606_39947":[0.663, 0.567, 0.758, 0.064, 0.014, 0.031, 0.758, 0.5, 0.837, 0.064, 0.018, 0.025, 0.663, 0.39, 0.837, 0.064, 0.025, 0.025],
"D_10090_562":[0.715, 0.752, 0.954, 0.213, 0.556, 0.285, 0.82, 0.715, 0.954, 0.248, 0.545, 0.326, 0.59, 0.674, 0.93, 0.213, 0.545, 0.213],
"D_10090_3702":[0.59, 0.131, 0.919, 0.102, 0.248, 0.41, 0.715, 0.2, 0.938, 0.125, 0.285, 0.5, 0.633, 0.131, 0.966, 0.102, 0.248,
     0.15],
"D_10090_4896":[0.312, 0.306, 0.954, 0.064, 0.088, 0.102, 0.288, 0.288, 0.954, 0.064, 0.088, 0.064, 0.337, 0.337, 0.954, 0.064, 0.088, 0.082],
"D_10090_10116":[0.712, 0.712, 0.966, 0.248, 0.031, 0.368, 0.758, 0.712, 0.966, 0.285, 0.031, 0.368, 0.5, 0.545, 0.896, 0.213, 0.009, 0.2],
"D_10090_39947":[0.368, 0.232, 0.914, 0.2, 0.037, 0.088, 0.567, 0.567, 0.914, 0.288, 0.037, 0.199, 0.556, 0.433, 0.914, 0.288, 0.037, 0.199],
    "D_10116_39947":[0.888, 0.827, 0.882, 0.787, 0.758, 0.936, 0.767, 0.642, 0.882, 0.82, 0.8, 0.898, 0.888, 0.827, 0.912, 0.85, 0.8,
     0.98],
"D_4932_9606_10090":[0.656, 0.219, 0.219, 0.016, nan, 0.016, 0.656, 0.219, 0.156, 0.016, nan, 0.016, 0.719, 0.219, 0.219, 0.016, nan, 0.016],
"D_4932_6239_7227":[0.578, 0.031, 0.578, 0.016, nan, 0.219, 0.5, 0.031, 0.578, 0.016, nan, 0.219, 0.656, 0.031, 0.578, 0.016, nan, 0.219],
"D_5spec":[0.809, 0.371, 0.578, 0.004, nan, 0.055, 0.809, 0.191, 0.473, 0.004, nan, 0.027, 0.809, 0.371, 0.527, 0.004, nan, 0.027],
"D_8spec":[0.958, 0.323, nan, 0.0, nan, 0.005, 0.979, 0.419, nan, 0.0, nan, 0.007, 0.973, 0.319, nan, 0.0, nan, 0.007],
"D_10spec":[0.996, 0.827, nan, 0.0, nan, nan, 0.991, 0.658, nan, 0.0, nan, nan, 0.989, 0.608, nan, 0.0, nan, nan]
}
# Verify that the length of 'Approaches' matches the length of each other list in the dictionary
def verify_lengths(data_dict):
    approaches_len = len(data_dict["Approaches"])
    for key, values in data_dict.items():
        if key != "Approaches" and len(values) != approaches_len:
            print(f"Mismatch found in '{key}': expected {approaches_len}, but got {len(values)}.")
            return False
    print("All lengths are consistent with 'Approaches'.")
    return True

# Run the verification
if not verify_lengths(data_p_value_all_metrics):
    exit()

def extract_p_values(p_value_dict):
    # Initialize a dictionary to hold the p-value counts
    results = {}

    # Loop through the data to extract p-values and corresponding approaches
    for idx, approach in enumerate(p_value_dict["Approaches"]):
        # Get the p-values for each metric
        p_values = [p_value_dict[metric][idx] for metric in p_value_dict if metric != "Approaches"]
        for p in p_values:
            if not pd.notna(p):
                print(p)
        # Count significant results (p < 0.05) while ignoring NaN values
        significant_count = sum(1 for p in p_values if pd.notna(p) and p < 0.05)

        # Extract approach and baseline from the comparison
        approach_name, baseline_name = approach.split(" vs ")

        # Initialize dictionary keys if not present
        if baseline_name not in results:
            results[baseline_name] = {}
        if approach_name not in results[baseline_name]:
            results[baseline_name][approach_name] = 0

        # Store count of significant p-values
        results[baseline_name][approach_name] += significant_count

    return results


# Function to create a DataFrame for easy visualization
def create_summary_table(results):
    # Convert nested dictionary to DataFrame
    df = pd.DataFrame(results).fillna(0).astype(int)
    return df.T  # Transpose for correct format




# Process and create the summary table
results = extract_p_values(data_p_value_all_metrics)
summary_table = create_summary_table(results)

# Display the summary table
print("Summary Table:")
print(summary_table)

# Optionally, save as CSV
summary_table.to_csv("summary_table.csv")

# Display summary table as heatmap (requires seaborn and matplotlib)
import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
sns.heatmap(summary_table, annot=True, cmap="YlGnBu", cbar_kws={'label': 'Significant Datasets Count'})
plt.title("Summary of Significant Pairwise Comparisons")
plt.xlabel("GA2Vec Variants")
plt.ylabel("Baseline Methods")
plt.show()